namespace Diamond.Tests;

using FsCheck;
using FsCheck.NUnit;

[TestFixture]
public class DiamondMakerPBTests {
  private static readonly char[] alphabet = Enumerable.Range('A', 26).Select(x => (char) x).ToArray();
  private Arbitrary<Char> charGenerator = Arb.From(Gen.Elements<char>(alphabet));

  private string[] GetDiamondLines(char c) {
    return DiamondMaker.GenerateDiamond(c).Split("\n");
  }

  /// <summary>
  /// Tests the number of lines in the generated diamond.
  /// </summary>
  /// <remarks>
  /// This property test checks that the number of lines in the diamond generated by the `GenerateDiamond` method
  /// is correct according to the position of the mid-character in the alphabet. 
  /// Specifically, the number of lines should be equal to the position of the mid-character in the alphabet
  /// times two, plus one (e.g., for 'C' whose position is 2, the diamond should have a height of 5 lines).
  /// </remarks>
  [Property]
  public Property NumberOfLines() {
    return Prop.ForAll(charGenerator, c => 
      GetDiamondLines(c).Length == Array.IndexOf(alphabet, c) * 2 + 1
    );
  }

  /// <summary>
  /// Tests the first line property of the generated diamond.
  /// </summary>
  /// <remarks>
  /// This property verifies that the first line of the diamond contains only one letter and it 
  /// is 'A'. The south vertice will be tested by the Symmetry property. 
  /// </remarks>
  [Property]
  public Property FirstLineShouldContainOnlyA() {
    return Prop.ForAll(charGenerator, c => 
      GetDiamondLines(c).First().Trim() == "A"
    );
  }

  /// <summary>
  /// Tests that the upper-half of the diamond follows a lexical order.
  /// </summary>
  /// <remarks>
  /// This property test verifies that, for any line in the upper-half of the diamond, the letter contained there
  /// is always less than to the letter contained in the next line.
  /// </remarks>
  [Property]
  public Property UpperHalfFollowsLexicalOrder() {
    return Prop.ForAll(charGenerator, c => {
      var lines = GetDiamondLines(c);
      var firstHalf = lines.Take(lines.Length / 2);
      return firstHalf.Zip(firstHalf.Skip(1), (currentLine, nextLine) =>
        currentLine.First(ch => ch != ' ') < nextLine.First(ch => ch != ' ')
      ).All(b => b);
    });
  }

  /// <summary>
  /// Tests that the upper-right quarter of the diamond has only one letter per line forming a diagonal.
  /// </summary>
  /// <remarks>
  /// This property test verifies that in the upper-right quarter of the diamond, there is only one letter per line, 
  /// and these letters form a diagonal. By symmetry, this property will hold for all the other quarters of the diamond.
  /// </remarks>
  [Property]
  public Property FirstQuarterShouldContainDiagonalChars() {
    return Prop.ForAll(charGenerator, c => {
      var lines = GetDiamondLines(c);
      var firstHalf = lines.Take(lines.Length / 2 + 1);
      var midSize = firstHalf.Last().Length / 2 + 1;

      return firstHalf.Select((line, i) => {
        var l = line.Take(midSize);

        var hasOneLetter = l.Count(ch => ch != ' ') == 1;
        var formsDiagonal = line.IndexOf(l.First(ch => ch != ' ')) == midSize - i - 1;
        
        return hasOneLetter && formsDiagonal;
      }).All(b => b);
    });
  }

  /// <summary>
  /// Tests that all diamonds have horizontal symmetry in their lines.
  /// </summary>
  /// <remarks>
  /// This property test verifies that every line in the diamond has horizontal symmetry.
  /// The test checks that for each line in the diamond, if we reverse the line, it should produce the same line.
  /// We do have to take into account padding, as line might break without additional spaces.
  /// </remarks>
  [Property]
  public Property DiamondShouldHaveHorizontalSymmetry() {
    return Prop.ForAll(charGenerator, c => {
      var lines = GetDiamondLines(c);
      var midLineSize = lines[lines.Length / 2].Length;
      return lines.All(line => {
        var paddedLine = line.PadRight(midLineSize);
        return paddedLine.SequenceEqual(paddedLine.Reverse());
      });
    });
  }

  /// <summary>
  /// Tests that all diamonds are symmetric around the middle line.
  /// </summary>
  /// <remarks>
  /// This property test verifies that every diamond generated by the `GenerateDiamond` method is symmetric along its horizontal axis.
  /// The test checks that the sequence of lines in the diamond is equal to the sequence of lines in reverse order. This ensures that 
  /// the top half of the diamond is a mirror image of the bottom half.
  /// </remarks>
  [Property]
  public Property DiamondShouldHaveVerticalSymmetry() {
    return Prop.ForAll(charGenerator, c => {
      var lines = GetDiamondLines(c);
      return lines.SequenceEqual(lines.Reverse());
    });
  }
}